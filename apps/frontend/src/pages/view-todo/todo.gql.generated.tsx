/* This file is autogenerated, please don't change it manually! */
import * as Types from '../../graphql.types';

import gql from 'graphql-tag';
import * as ApolloReactCommon from '@apollo/react-common';
import * as ApolloReactHooks from '@apollo/react-hooks';
export type Maybe<T> = T | null;


/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
};

export type Mutation = {
   __typename?: 'Mutation',
  addTodo: Maybe<Todo>,
  deleteTodo: Maybe<Todo>,
  updateTodoText: Maybe<Todo>,
  markTodoComplete: Maybe<Todo>,
};


export type MutationAddTodoArgs = {
  text: Scalars['String']
};


export type MutationDeleteTodoArgs = {
  id: Scalars['String']
};


export type MutationUpdateTodoTextArgs = {
  id: Scalars['String'],
  text: Scalars['String']
};


export type MutationMarkTodoCompleteArgs = {
  id: Scalars['String']
};

export type Query = {
   __typename?: 'Query',
  todo: Maybe<Todo>,
  todos: Maybe<Array<Maybe<Todo>>>,
  activeTodos: Maybe<Array<Maybe<Todo>>>,
  completedTodos: Maybe<Array<Maybe<Todo>>>,
};


export type QueryTodoArgs = {
  id: Scalars['String']
};

export type Todo = {
   __typename?: 'Todo',
  id: Scalars['String'],
  text: Scalars['String'],
  isComplete: Scalars['Boolean'],
};

export type TodoQueryQueryVariables = {
  id: Types.Scalars['String']
};


export type TodoQueryQuery = (
  { __typename?: 'Query' }
  & { todo: Types.Maybe<(
    { __typename?: 'Todo' }
    & Pick<Types.Todo, 'text' | 'isComplete'>
  )> }
);


export const TodoQueryDocument = gql`
    query TodoQuery($id: String!) {
  todo(id: $id) {
    text
    isComplete
  }
}
    `;

    export function useTodoQueryQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<TodoQueryQuery, TodoQueryQueryVariables>) {
      return ApolloReactHooks.useQuery<TodoQueryQuery, TodoQueryQueryVariables>(TodoQueryDocument, baseOptions);
    }
      export function useTodoQueryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TodoQueryQuery, TodoQueryQueryVariables>) {
        return ApolloReactHooks.useLazyQuery<TodoQueryQuery, TodoQueryQueryVariables>(TodoQueryDocument, baseOptions);
      }
      
export type TodoQueryQueryHookResult = ReturnType<typeof useTodoQueryQuery>;
export type TodoQueryQueryResult = ApolloReactCommon.QueryResult<TodoQueryQuery, TodoQueryQueryVariables>;