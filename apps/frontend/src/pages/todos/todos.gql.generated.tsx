/* This file is autogenerated, please don't change it manually! */
import * as Types from '../../graphql.types';

import gql from 'graphql-tag';
import * as ApolloReactCommon from '@apollo/react-common';
import * as ApolloReactHooks from '@apollo/react-hooks';
export type Maybe<T> = T | null;


/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
};

export type Mutation = {
   __typename?: 'Mutation',
  addTodo: Maybe<Todo>,
  deleteTodo: Maybe<Todo>,
  updateTodoText: Maybe<Todo>,
  markTodoComplete: Maybe<Todo>,
};


export type MutationAddTodoArgs = {
  text: Scalars['String']
};


export type MutationDeleteTodoArgs = {
  id: Scalars['String']
};


export type MutationUpdateTodoTextArgs = {
  id: Scalars['String'],
  text: Scalars['String']
};


export type MutationMarkTodoCompleteArgs = {
  id: Scalars['String']
};

export type Query = {
   __typename?: 'Query',
  todo: Maybe<Todo>,
  todos: Maybe<Array<Maybe<Todo>>>,
  activeTodos: Maybe<Array<Maybe<Todo>>>,
  completedTodos: Maybe<Array<Maybe<Todo>>>,
};


export type QueryTodoArgs = {
  id: Scalars['String']
};

export type Todo = {
   __typename?: 'Todo',
  id: Scalars['String'],
  text: Scalars['String'],
  isComplete: Scalars['Boolean'],
};

export type GetTodosQueryVariables = {};


export type GetTodosQuery = (
  { __typename?: 'Query' }
  & { todos: Types.Maybe<Array<Types.Maybe<(
    { __typename?: 'Todo' }
    & Pick<Types.Todo, 'id' | 'text' | 'isComplete'>
  )>>> }
);

export type DeleteTodoMutationVariables = {
  id: Types.Scalars['String']
};


export type DeleteTodoMutation = (
  { __typename?: 'Mutation' }
  & { deleteTodo: Types.Maybe<(
    { __typename?: 'Todo' }
    & Pick<Types.Todo, 'id' | 'text' | 'isComplete'>
  )> }
);

export type EditTodoMutationVariables = {
  id: Types.Scalars['String'],
  text: Types.Scalars['String']
};


export type EditTodoMutation = (
  { __typename?: 'Mutation' }
  & { updateTodoText: Types.Maybe<(
    { __typename?: 'Todo' }
    & Pick<Types.Todo, 'id' | 'text' | 'isComplete'>
  )> }
);


export const GetTodosDocument = gql`
    query getTodos {
  todos {
    id
    text
    isComplete
  }
}
    `;

    export function useGetTodosQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTodosQuery, GetTodosQueryVariables>) {
      return ApolloReactHooks.useQuery<GetTodosQuery, GetTodosQueryVariables>(GetTodosDocument, baseOptions);
    }
      export function useGetTodosLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTodosQuery, GetTodosQueryVariables>) {
        return ApolloReactHooks.useLazyQuery<GetTodosQuery, GetTodosQueryVariables>(GetTodosDocument, baseOptions);
      }
      
export type GetTodosQueryHookResult = ReturnType<typeof useGetTodosQuery>;
export type GetTodosQueryResult = ApolloReactCommon.QueryResult<GetTodosQuery, GetTodosQueryVariables>;
export const DeleteTodoDocument = gql`
    mutation deleteTodo($id: String!) {
  deleteTodo(id: $id) {
    id
    text
    isComplete
  }
}
    `;
export type DeleteTodoMutationFn = ApolloReactCommon.MutationFunction<DeleteTodoMutation, DeleteTodoMutationVariables>;

    export function useDeleteTodoMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteTodoMutation, DeleteTodoMutationVariables>) {
      return ApolloReactHooks.useMutation<DeleteTodoMutation, DeleteTodoMutationVariables>(DeleteTodoDocument, baseOptions);
    }
export type DeleteTodoMutationHookResult = ReturnType<typeof useDeleteTodoMutation>;
export type DeleteTodoMutationResult = ApolloReactCommon.MutationResult<DeleteTodoMutation>;
export type DeleteTodoMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteTodoMutation, DeleteTodoMutationVariables>;
export const EditTodoDocument = gql`
    mutation editTodo($id: String!, $text: String!) {
  updateTodoText(id: $id, text: $text) {
    id
    text
    isComplete
  }
}
    `;
export type EditTodoMutationFn = ApolloReactCommon.MutationFunction<EditTodoMutation, EditTodoMutationVariables>;

    export function useEditTodoMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<EditTodoMutation, EditTodoMutationVariables>) {
      return ApolloReactHooks.useMutation<EditTodoMutation, EditTodoMutationVariables>(EditTodoDocument, baseOptions);
    }
export type EditTodoMutationHookResult = ReturnType<typeof useEditTodoMutation>;
export type EditTodoMutationResult = ApolloReactCommon.MutationResult<EditTodoMutation>;
export type EditTodoMutationOptions = ApolloReactCommon.BaseMutationOptions<EditTodoMutation, EditTodoMutationVariables>;